% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/StanDCM.ppmc.R
\name{StanDCM.ppmc}
\alias{StanDCM.ppmc}
\title{A function to calculate percentage of extreme p-values for sumscore distribution}
\usage{
StanDCM.ppmc(
  stan.model,
  response.matrix,
  n.sim = NULL,
  n.burnin = NULL,
  plot.option = FALSE,
  type = "sumscores"
)
}
\arguments{
\item{stan.model}{A rStan object}

\item{response.matrix}{the response matrix used by RStan Object}

\item{n.sim}{number of simulations for Posterior Predictive Model Checking}

\item{n.burnin}{number of burn-in iterations}

\item{plot.option}{logical. whether to provide a plot for ppmc using ggplot2}

\item{type}{The test statistics to perform PPMC. The default is "sumscores". Setting "chisq" will calculate the bivariate item Chi square.}
}
\value{
p-values tables
}
\description{
The StanDCM.ppmc Function to automate Stan code generation for LCDMs with binary responses
}
\examples{
\dontrun{
load("data.RData")
Qmatrix<-cbind(Qmatrix,rep(1,9)); Qmatrix[1,1]<-0
dim(respMatrix)
misspecifiedQmatrix <- Qmatrix
misspecifiedQmatrix[1:6,] <- 1-Qmatrix[1:6,]
misspecifiedQmatrix[1,3] = 0
mod2 <- StanDINA.run(misspecifiedQmatrix,response.matrix = respMatrix,iter=100,init.list='cdm', chain.num = 3, warmup = 20)
StanDCM.ppmc(stan.model = mod2, response.matrix = respMatrix, n.sim = 1000, n.burnin = 1, plot.option = FALSE)
}

}
\author{
{Jihong Zhang, University of Iowa, \email{jihong-zhang@uiowa.edu}}
}
